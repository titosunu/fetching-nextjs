import Head from "next/head";
import {
  Container,
  Heading,
  Table,
  Thead,
  Tbody,
  Th,
  Tr,
  Td,
  Spinner,
  Input,
  FormControl,
  FormLabel,
  FormHelperText,
  VStack,
  Button,
  Box,
  useToast,
} from "@chakra-ui/react";
import { useProducts } from "@/features/product/useProducts";
import { useFormik } from "formik";
import { useCreateProduct } from "@/features/product/useCreateProduct";
import { useDeleteProduct } from "@/features/product/useDeleteProduct";
import { useEditProduct } from "@/features/product/useEditProduct";

export default function Home() {
  const {
    data,
    isLoading: productsIsLoading,
    refetch: refetchProducts,
  } = useProducts();
  const toast = useToast();

  // Create Product
  const formik = useFormik({
    initialValues: {
      name: "",
      price: "",
      description: "",
      image: "",
      id: "",
    },
    onSubmit: () => {
      const { name, price, description, image, id } = formik.values;

      if (id) {
        editProduct({
          name,
          price: parseInt(price),
          description,
          image,
          id,
        });

        toast({
          title: "product telah di edit",
          status: "success",
        });
      } else {
        createProduct({
          name,
          price: parseInt(price),
          description,
          image,
        });

        toast({
          title: "product ditambahkan",
          status: "success",
        });
      }

      formik.setFieldValue("name", "");
      formik.setFieldValue("price", 0);
      formik.setFieldValue("description", "");
      formik.setFieldValue("image", "");
      formik.setFieldValue("id", "");
    },
  });

  const { mutate: createProduct, isPending: createProductsIsLoading } =
    useCreateProduct({
      onSuccess: () => {
        refetchProducts();
      },
    });

  const { mutate: editProduct, isPending: editProductIsPending } =
    useEditProduct({
      onSuccess: () => {
        refetchProducts();
      },
    });
  // End Create Product

  const handleFormInput = (e) => {
    formik.setFieldValue(e.target.name, e.target.value);
  };

  // Delete Product
  const { mutate: deleteProduct } = useDeleteProduct({
    onSuccess: () => {
      refetchProducts();
    },
  });

  const confirmDelete = (productId) => {
    const shouldDelete = confirm("Are you sure ?");

    if (shouldDelete) {
      deleteProduct(productId);
      toast({
        title: "Deleted product",
        status: "info",
      });
    }
  };
  // End Delete Product

  // Edit Product
  const onEdit = (product) => {
    formik.setFieldValue("id", product.id);
    formik.setFieldValue("name", product.name);
    formik.setFieldValue("price", product.price);
    formik.setFieldValue("description", product.description);
    formik.setFieldValue("image", product.image);
  };
  // End Edit Product

  const renderProducts = () => {
    return data?.data.map((product, index) => {
      return (
        <Tr key={product.id}>
          <Td>{index + 1}</Td>
          <Td>{product.name}</Td>
          <Td>Rp {product.price.toLocaleString("id-ID")}</Td>
          <Td>{product.description}</Td>
          <Td>
            <Button
              onClick={() => onEdit(product)}
              colorScheme="yellow"
              variant="solid"
              type="submit"
            >
              Edit
            </Button>
          </Td>
          <Td>
            <Button
              onClick={() => confirmDelete(product.id)}
              colorScheme="red"
              variant="solid"
              type="submit"
            >
              Delete
            </Button>
          </Td>
        </Tr>
      );
    });
  };

  return (
    <>
      <Head>
        <title>Products List</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container maxW="container.lg" py={10}>
          <Heading as="h1" mb={6} textAlign="center">
            Products List
          </Heading>
          <Box
            mb={10}
            border="1px"
            borderColor="gray.200"
            borderRadius="md"
            overflow="hidden"
          >
            <Table
              variant="striped"
              colorScheme="blue"
              width="100%"
              border="1px"
              borderColor="gray.200"
            >
              <Thead>
                <Tr>
                  <Th border="1px" borderColor="gray.200">
                    Id
                  </Th>
                  <Th border="1px" borderColor="gray.200">
                    Name
                  </Th>
                  <Th border="1px" borderColor="gray.200">
                    Price
                  </Th>
                  <Th border="1px" borderColor="gray.200">
                    Description
                  </Th>
                  <Th border="1px" borderColor="gray.200" colSpan={2}>
                    Action
                  </Th>
                </Tr>
              </Thead>
              <Tbody>
                {productsIsLoading && (
                  <Tr>
                    <Td
                      colSpan={5}
                      textAlign="center"
                      border="1px"
                      borderColor="gray.200"
                    >
                      <Spinner />
                    </Td>
                  </Tr>
                )}
                {renderProducts()}
              </Tbody>
            </Table>
          </Box>
          <Box
            as="form"
            onSubmit={formik.handleSubmit}
            p={5}
            shadow="md"
            borderWidth="1px"
            borderRadius="md"
          >
            <VStack spacing={5}>
              <FormControl>
                <FormLabel>Product Id</FormLabel>
                <Input
                  name="id"
                  onChange={handleFormInput}
                  value={formik.values.id}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Title</FormLabel>
                <Input
                  name="name"
                  onChange={handleFormInput}
                  value={formik.values.name}
                />
                <FormHelperText>Title product</FormHelperText>
              </FormControl>
              <FormControl>
                <FormLabel>Price</FormLabel>
                <Input
                  name="price"
                  onChange={handleFormInput}
                  value={formik.values.price}
                />
                <FormHelperText>Price product</FormHelperText>
              </FormControl>
              <FormControl>
                <FormLabel>Description</FormLabel>
                <Input
                  name="description"
                  onChange={handleFormInput}
                  value={formik.values.description}
                />
                <FormHelperText>Description product</FormHelperText>
              </FormControl>
              <FormControl>
                <FormLabel>Images</FormLabel>
                <Input
                  name="image"
                  onChange={handleFormInput}
                  value={formik.values.image}
                />
                <FormHelperText>Image for product</FormHelperText>
              </FormControl>
              {createProductsIsLoading || editProductIsPending ? (
                <Spinner />
              ) : (
                <Button colorScheme="teal" variant="solid" type="submit">
                  Submit product
                </Button>
              )}
            </VStack>
          </Box>
        </Container>
      </main>
    </>
  );
}
